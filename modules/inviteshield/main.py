import discord
from discord import utils
from discord.ext import commands, tasks
import logging
import asyncio
from datetime import datetime

async def setup(bot):
    await bot.add_cog(Inviteshield(bot))

class Inviteshield(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.hprint("Invite shield cog initialized")
        self.bot.loop.create_task(self.connect_db())
        self.alert_channel = 978024803959197697
        self.invite_cooldown = False

    def hprint(self, text):
        logging.info(f'[Invite system]: {text}')
    
    async def connect_db(self):
        # the actual inviter will be the bot, but in this case the user generates the code through the bot using a command
        # so this column stores who actually told the bot to make that invite
        await self.bot.db_conn.execute('CREATE TABLE IF NOT EXISTS bot_invites (inviter integer, code text, used boolean DEFAULT 0)')
        await self.bot.db_conn.commit()

    async def add_invite_to_db(self, inviter, code):
        await self.bot.db_conn.execute('INSERT INTO bot_invites VALUES (?, ?, ?)', (inviter, code, 0))
        await self.bot.db_conn.commit()
    
    async def get_inviter_from_code(self, code):
        find = await self.bot.db_conn.execute("SELECT inviter FROM bot_invites WHERE code = ?", (code,))
        await find.fetchone()
        if not find:
            return None
        return find[0]
    
    async def mark_invite_used(self, code):
        await self.bot.db_conn.execute("UPDATE bot_invites SET used = 1 WHERE code = ?", (code,))
        await self.bot.db_conn.commit()

    @commands.command(name='invite', description = 'Generates an invite link for the server that you can send to people')
    @commands.cooldown(1, 3600, commands.BucketType.user)
    async def _invite(self, ctx):
        if ctx.author.id == 318458952138358794:
            await ctx.reply('An issue has been encountered.')
            return
        if self.invite_cooldown:
            await ctx.reply("An invite was generated for someone too recently ago. Please wait a bit before trying to generate a new invite, or ask Lance to make one; this is to prevent raids.")
            return
        diff = discord.utils.utcnow() - ctx.author.joined_at
        if diff.total_seconds() >= 18000:
            # max invites needs to be 2. this is intended for 1 person, but discord deletes the invite once it is used up, so we cant do any tracking. 
            inv = await self.bot.get_channel(972706036765065227).create_invite(max_age = 3600, max_uses = 2, reason = f'Invite generated by {str(ctx.author)}')
            try:
                await ctx.author.send(f'Hi {ctx.author.mention}, your requested invite code to share with a friend is below. Thanks for sharing the server, and we hope your friend has fun!\n{str(inv)}')
                await ctx.reply('I have messaged you your invite link.')
                await self.add_invite_to_db(ctx.author.id, inv.code)
                self.invite_cooldown = True
                await asyncio.sleep(3600)
                self.invite_cooldown = False
            except:
                await ctx.reply('I could not DM you an invite link. Please check your privacy settings and try again.')
                await inv.delete()
        else:
            await ctx.reply(f'Sorry, you must have been a member of this server for at least 5 hours to share an invite.')
            return
    

    @commands.Cog.listener()
    async def on_member_join(self, mem):
        self.hprint('User joined, scanning guild invites...')
        active_invites = await mem.guild.invites()
        self.hprint('Got active invites, looping now')
        for i in active_invites:
            if i.uses == 1:
                self.hprint(f'Invite {i.code} has 1 use, checking if this is a candidate')
                candidate = await self.bot.db_conn.execute("SELECT * FROM bot_invites WHERE code = ? AND used = 0", (i.code,))
                candidate = await candidate.fetchone()
                if candidate:
                    self.hprint(f"this looks like it! {candidate} ")
                    inviter = candidate[0]
                    code = candidate[1]
                    await self.mark_invite_used(code)
                    await i.delete()
                    embed = discord.Embed(
                        title = f'{str(mem)} joined using an invite from {str(self.bot.get_user(inviter))}',
                        description = f'Code used: {code}',
                        color = discord.Colour.green()
                    )
                    embed.set_footer(text = f'Inviter ID: {inviter}')
                    embed.set_thumbnail(url = mem.display_avatar.url)
                    await self.bot.get_channel(self.alert_channel).send(embed = embed)
                    return
        embed = discord.Embed(
            title = f'{str(mem)} joined, but cannot find inviter',
            description = f'Were they invited manually?',
            color = discord.Colour.red()
        )
        embed.set_thumbnail(url = mem.display_avatar.url)
        await self.bot.get_channel(self.alert_channel).send(embed = embed)




    
#await ctx.bot.tree.sync()
